// <auto-generated />
using System;
using BrizaBreath.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrizaBreath.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrizaBreath.Models.MembershipPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("MembershipPlan", "dbo");
                });

            modelBuilder.Entity("BrizaBreath.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<string>("AHATIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AHATResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AHATTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("APIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("APResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("APTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BBIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BBResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BBTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BOXIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BOXResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BOXTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BREIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BREResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BRETotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BRWIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BRWResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BRWTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CBResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CBTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CO2Intervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CO2ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CO2TotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CTIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CTResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CTTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HATCIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HATCResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HATCTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HATIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HATResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HATTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HUMIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HUMResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HUMTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NBIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NBResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NBTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("O2Intervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("O2ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("O2TotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RBIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RBResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RBTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SBIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SBResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SBTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SEXIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SEXResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SEXTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UBIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UBResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UBTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WHIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WHResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WHTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("brtResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("brtResultScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("lungsResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("lungsResultScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("yogicIntervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("yogicResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("yogicTotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
